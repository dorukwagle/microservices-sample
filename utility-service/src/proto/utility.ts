// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: utility.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "utility";

export enum templateType {
  welcome = 0,
  otp = 1,
  reset = 2,
  verify = 3,
  UNRECOGNIZED = -1,
}

export interface To {
  email: string;
  name: string;
}

export interface MailContent {
  template: templateType;
  data: string[];
}

export interface SendEmailRequest {
  to: To | undefined;
  subject: string;
  body: MailContent | undefined;
}

export interface SendSmsRequest {
  to: string;
  message: string;
}

export interface OtpRequest {
  sendTo: string;
}

export interface VerifyOtpRequest {
  sendTo: string;
  code: string;
}

export interface SendResponse {
  success: boolean;
  message: string;
}

export interface VerifyOtpResponse {
  valid: boolean;
  message: string;
}

export const UTILITY_PACKAGE_NAME = "utility";

export interface UtilityServiceClient {
  sendEmail(request: SendEmailRequest): Observable<SendResponse>;

  sendSms(request: SendSmsRequest): Observable<SendResponse>;

  sendOtp(request: OtpRequest): Observable<SendResponse>;

  verifyOtp(request: VerifyOtpRequest): Observable<VerifyOtpResponse>;
}

export interface UtilityServiceController {
  sendEmail(request: SendEmailRequest): Promise<SendResponse> | Observable<SendResponse> | SendResponse;

  sendSms(request: SendSmsRequest): Promise<SendResponse> | Observable<SendResponse> | SendResponse;

  sendOtp(request: OtpRequest): Promise<SendResponse> | Observable<SendResponse> | SendResponse;

  verifyOtp(request: VerifyOtpRequest): Promise<VerifyOtpResponse> | Observable<VerifyOtpResponse> | VerifyOtpResponse;
}

export function UtilityServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendEmail", "sendSms", "sendOtp", "verifyOtp"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UtilityService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UtilityService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const UTILITY_SERVICE_NAME = "UtilityService";
