// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users";

/** Keeping these for future use when implementing profile updates */
export const UserRole = { UNKNOWN: 0, ADMIN: 1, USER: 2, UNRECOGNIZED: -1 } as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];

export namespace UserRole {
  export type UNKNOWN = typeof UserRole.UNKNOWN;
  export type ADMIN = typeof UserRole.ADMIN;
  export type USER = typeof UserRole.USER;
  export type UNRECOGNIZED = typeof UserRole.UNRECOGNIZED;
}

export const AccountStatus = { ACTIVE: 0, INACTIVE: 1, UNRECOGNIZED: -1 } as const;

export type AccountStatus = typeof AccountStatus[keyof typeof AccountStatus];

export namespace AccountStatus {
  export type ACTIVE = typeof AccountStatus.ACTIVE;
  export type INACTIVE = typeof AccountStatus.INACTIVE;
  export type UNRECOGNIZED = typeof AccountStatus.UNRECOGNIZED;
}

export interface RegisterUserProfileRequest {
  userId: string;
}

export interface RegisterUserProfileResponse {
  statusCode: number;
}

export interface UserProfile {
  userId: string;
  fullName: string;
  username: string;
  email: string;
  phone?: string | undefined;
  roles: UserRole[];
  profilePicture?: string | undefined;
  status: AccountStatus;
  /** Using int64 for timestamp to avoid google.protobuf.Timestamp dependency */
  createdAt: number;
  updatedAt: number;
  deletedAt?: number | undefined;
}

export interface ErrorResponse {
  code: string;
  message: string;
  details: { [key: string]: string };
}

export interface ErrorResponse_DetailsEntry {
  key: string;
  value: string;
}

export const USERS_PACKAGE_NAME = "users";

export interface UsersServiceClient {
  registerUserProfile(request: RegisterUserProfileRequest): Observable<RegisterUserProfileResponse>;
}

export interface UsersServiceController {
  registerUserProfile(
    request: RegisterUserProfileRequest,
  ): Promise<RegisterUserProfileResponse> | Observable<RegisterUserProfileResponse> | RegisterUserProfileResponse;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerUserProfile"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
