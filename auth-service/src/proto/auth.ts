// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "auth";

export const UserRole = { UNSET: 0, ADMIN: 1, USER: 2, UNRECOGNIZED: -1 } as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];

export namespace UserRole {
  export type UNSET = typeof UserRole.UNSET;
  export type ADMIN = typeof UserRole.ADMIN;
  export type USER = typeof UserRole.USER;
  export type UNRECOGNIZED = typeof UserRole.UNRECOGNIZED;
}

export const AccountStatus = { ACTIVE: 0, INACTIVE: 1, UNRECOGNIZED: -1 } as const;

export type AccountStatus = typeof AccountStatus[keyof typeof AccountStatus];

export namespace AccountStatus {
  export type ACTIVE = typeof AccountStatus.ACTIVE;
  export type INACTIVE = typeof AccountStatus.INACTIVE;
  export type UNRECOGNIZED = typeof AccountStatus.UNRECOGNIZED;
}

export const MultiAuth = { NONE: 0, PHONE: 1, EMAIL: 2, UNRECOGNIZED: -1 } as const;

export type MultiAuth = typeof MultiAuth[keyof typeof MultiAuth];

export namespace MultiAuth {
  export type NONE = typeof MultiAuth.NONE;
  export type PHONE = typeof MultiAuth.PHONE;
  export type EMAIL = typeof MultiAuth.EMAIL;
  export type UNRECOGNIZED = typeof MultiAuth.UNRECOGNIZED;
}

export interface User {
  userId: string;
  username: string;
  email: string;
  contact?: string | undefined;
  roles: UserRole[];
  emailVerified: boolean;
  contactVerified: boolean;
  multiAuth: MultiAuth;
  status: AccountStatus;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface GetAuthInfoRequest {
  userId: string;
}

export interface GetAuthInfoResponse {
  user: User | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  getAuthInfo(request: GetAuthInfoRequest): Observable<GetAuthInfoResponse>;
}

export interface AuthServiceController {
  getAuthInfo(
    request: GetAuthInfoRequest,
  ): Promise<GetAuthInfoResponse> | Observable<GetAuthInfoResponse> | GetAuthInfoResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAuthInfo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
