// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN 
  USER
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}

enum MultiAuth {
  NONE
  PHONE
  EMAIL 
}

model Users {
  userId String @id @default(cuid())
  username String @unique
  email String @unique
  contact String? @unique
  password String
  roles Json
  emailVerified Boolean @default(false)
  contactVerified Boolean @default(false)
  multiAuth MultiAuth @default(NONE)
  status AccountStatus @default(ACTIVE)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
  sessions Sessions[]
  biometricKeys BiometricKeys[]
  @@index([username, email, contact])
}

model Sessions {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  roles Json
  deviceInfo String
  deviceId String?
  user Users @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  deletedAt DateTime?
  expiresAt DateTime @db.Timestamp(3)

  @@index([sessionToken])
  @@index([userId])
  @@index([userId, sessionToken])
}

model BiometricKeys {
  keyId String @id @default(cuid())
  userId String
  publicKey String @unique
  deviceId String @unique
  tempChallenge String? @unique
  challengeExpiresAt DateTime? @db.Timestamp(3)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
  user Users @relation(fields: [userId], references: [userId])
  @@index([deviceId])
  @@index([deviceId, tempChallenge])
}

  