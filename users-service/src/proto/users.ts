// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users";

export enum AccountStatus {
  ACTIVE = 0,
  INACTIVE = 1,
  UNRECOGNIZED = -1,
}

export interface RegisterUserProfileRequest {
  userId: string;
}

export interface RegisterUserProfileResponse {
  statusCode: number;
}

export interface UserProfile {
  userId: string;
  fullName: string;
  profileImage?: string | undefined;
}

export interface ProfileInfoRequest {
  userId: string;
}

export interface ErrorResponse {
  code: string;
  message: string;
  details: { [key: string]: string };
}

export interface ErrorResponse_DetailsEntry {
  key: string;
  value: string;
}

export const USERS_PACKAGE_NAME = "users";

export interface UsersServiceClient {
  registerUserProfile(request: RegisterUserProfileRequest): Observable<RegisterUserProfileResponse>;

  getProfileInfo(request: ProfileInfoRequest): Observable<UserProfile>;
}

export interface UsersServiceController {
  registerUserProfile(
    request: RegisterUserProfileRequest,
  ): Promise<RegisterUserProfileResponse> | Observable<RegisterUserProfileResponse> | RegisterUserProfileResponse;

  getProfileInfo(request: ProfileInfoRequest): Promise<UserProfile> | Observable<UserProfile> | UserProfile;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerUserProfile", "getProfileInfo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
