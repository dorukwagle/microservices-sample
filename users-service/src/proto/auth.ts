// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "auth";

export enum UserRole {
  UNSET = 0,
  ADMIN = 1,
  USER = 2,
  UNRECOGNIZED = -1,
}

export enum AccountStatus {
  ACTIVE = 0,
  INACTIVE = 1,
  UNRECOGNIZED = -1,
}

export enum MultiAuth {
  NONE = 0,
  PHONE = 1,
  EMAIL = 2,
  UNRECOGNIZED = -1,
}

export interface User {
  userId: string;
  username: string;
  email: string;
  contact?: string | undefined;
  roles: UserRole[];
  emailVerified: boolean;
  contactVerified: boolean;
  multiAuth: MultiAuth;
  status: AccountStatus;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface GetAuthInfoRequest {
  userId: string;
}

export interface GetAuthInfoResponse {
  user: User | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  getAuthInfo(request: GetAuthInfoRequest): Observable<GetAuthInfoResponse>;
}

export interface AuthServiceController {
  getAuthInfo(
    request: GetAuthInfoRequest,
  ): Promise<GetAuthInfoResponse> | Observable<GetAuthInfoResponse> | GetAuthInfoResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAuthInfo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
